Global optimization report for : daxpy

LOOP BEGIN at daxpy.c (10, 3)
<Multiversioned v2>
    remark #15319: Loop was not vectorized: novector directive used
LOOP END

LOOP BEGIN at daxpy.c (10, 3)
<Multiversioned v1>
    remark #25228: Loop multiversioned for Data Dependence
    remark #15300: LOOP WAS VECTORIZED
    remark #15305: vectorization support: vector length 4
    remark #15475: --- begin vector loop cost summary ---
    remark #15476: scalar cost: 7.000000 
    remark #15477: vector cost: 2.687500 
    remark #15478: estimated potential speedup: 2.531250 
    remark #15309: vectorization support: normalized vectorization overhead 0.734375
    remark #15488: --- end vector loop cost summary ---
    remark #15447: --- begin vector loop memory reference summary ---
    remark #15450: unmasked unaligned unit stride loads: 2 
    remark #15451: unmasked unaligned unit stride stores: 1 
    remark #15474: --- end vector loop memory reference summary ---
LOOP END

LOOP BEGIN at daxpy.c (10, 3)
<Remainder loop for vectorization>
LOOP END
=================================================================

Global optimization report for : main

LOOP BEGIN at daxpy.c (55, 3)
    remark #15300: LOOP WAS VECTORIZED
    remark #15305: vectorization support: vector length 4
    remark #15475: --- begin vector loop cost summary ---
    remark #15476: scalar cost: 3.000000 
    remark #15477: vector cost: 1.593750 
    remark #15478: estimated potential speedup: 1.843750 
    remark #15309: vectorization support: normalized vectorization overhead 1.250000
    remark #15488: --- end vector loop cost summary ---
    remark #15447: --- begin vector loop memory reference summary ---
    remark #15451: unmasked unaligned unit stride stores: 1 
    remark #15474: --- end vector loop memory reference summary ---
LOOP END

LOOP BEGIN at daxpy.c (55, 3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at daxpy.c (37, 3)
    remark #15553: loop was not vectorized: outer loop is not an auto-vectorization candidate.

    LOOP BEGIN at daxpy.c (10, 3)
        remark #15300: LOOP WAS VECTORIZED
        remark #15305: vectorization support: vector length 4
        remark #15475: --- begin vector loop cost summary ---
        remark #15476: scalar cost: 7.000000 
        remark #15477: vector cost: 2.687500 
        remark #15478: estimated potential speedup: 2.531250 
        remark #15309: vectorization support: normalized vectorization overhead 0.734375
        remark #15488: --- end vector loop cost summary ---
        remark #15447: --- begin vector loop memory reference summary ---
        remark #15450: unmasked unaligned unit stride loads: 2 
        remark #15451: unmasked unaligned unit stride stores: 1 
        remark #15474: --- end vector loop memory reference summary ---
    LOOP END

    LOOP BEGIN at daxpy.c (10, 3)
    <Remainder loop for vectorization>
    LOOP END
LOOP END

LOOP BEGIN at daxpy.c (61, 3)
    remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification 5.0
    remark #25439: Loop unrolled with remainder by 2
LOOP END
=================================================================

Global optimization report for : init

LOOP BEGIN at daxpy.c (55, 3)
    remark #15300: LOOP WAS VECTORIZED
    remark #15305: vectorization support: vector length 4
    remark #15475: --- begin vector loop cost summary ---
    remark #15476: scalar cost: 3.000000 
    remark #15477: vector cost: 1.593750 
    remark #15478: estimated potential speedup: 1.843750 
    remark #15309: vectorization support: normalized vectorization overhead 1.250000
    remark #15488: --- end vector loop cost summary ---
    remark #15447: --- begin vector loop memory reference summary ---
    remark #15451: unmasked unaligned unit stride stores: 1 
    remark #15474: --- end vector loop memory reference summary ---
LOOP END

LOOP BEGIN at daxpy.c (55, 3)
<Remainder loop for vectorization>
LOOP END
=================================================================

Global optimization report for : check

LOOP BEGIN at daxpy.c (61, 3)
    remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification 5.0
    remark #25439: Loop unrolled with remainder by 2
LOOP END
=================================================================

---- Begin Inlining Report ----
Option Values:
  inline-threshold: 225
  inlinehint-threshold: 325
  inlinecold-threshold: 45
  inlineoptsize-threshold: 15

DEAD STATIC FUNC: atoi

DEAD STATIC FUNC: llvm.ssa.copy.i32

DEAD STATIC FUNC: llvm.ssa.copy.i64

COMPILE FUNC: daxpy
   -> DELETE: llvm.ssa.copy.i64 daxpy.c (10,26)

COMPILE FUNC: init
   -> DELETE: llvm.ssa.copy.i64 daxpy.c (55,26)

COMPILE FUNC: check
   -> DELETE: llvm.fabs.f64 daxpy.c (62,9)
   -> llvm.fabs.f64 daxpy.c (62,9)
   -> llvm.fabs.f64 daxpy.c (62,9)
   -> llvm.fabs.f64 daxpy.c (62,9)
   -> DELETE: llvm.ssa.copy.i64 daxpy.c (61,26)

COMPILE FUNC: main
   -> INLINE: atoi daxpy.c (21,9) (10<=487)
      -> EXTERN: strtol daxpy.c (363,16)
   -> INLINE: atoi daxpy.c (24,9) (10<=487)
      -> EXTERN: strtol daxpy.c (363,16)
   -> INLINE: atoi daxpy.c (25,14) (10<=487)
      -> EXTERN: strtol daxpy.c (363,16)
   -> EXTERN: printf daxpy.c (27,3)
   -> EXTERN: malloc daxpy.c (29,16)
   -> EXTERN: malloc daxpy.c (30,16)
   -> INLINE: init daxpy.c (33,3) (-25<=250)
   -> INLINE: init daxpy.c (34,3) (-25<=250)
   -> EXTERN: omp_get_wtime daxpy.c (36,16)
   -> EXTERN: omp_get_wtime daxpy.c (40,16)
   -> INLINE: check daxpy.c (42,17) (-5<=250)
      -> DELETE: llvm.fabs.f64 daxpy.c (62,9)
      -> llvm.fabs.f64 daxpy.c (62,9)
      -> llvm.fabs.f64 daxpy.c (62,9)
      -> llvm.fabs.f64 daxpy.c (62,9)
   -> INLINE: daxpy daxpy.c (38,5) (-10<=250)
   -> DELETE: puts daxpy.c (43,17)
   -> EXTERN: puts daxpy.c (44,8)
   -> EXTERN: printf daxpy.c (46,3)
   -> EXTERN: free daxpy.c (48,3)
   -> EXTERN: free daxpy.c (49,3)
   -> EXTERN: omp_get_wtime daxpy.c (36,16)
   -> EXTERN: omp_get_wtime daxpy.c (40,16)
   -> EXTERN: omp_get_wtime daxpy.c (40,16)
   -> DELETE: llvm.ssa.copy.i64 daxpy.c (55,26)
   -> DELETE: llvm.ssa.copy.i64 daxpy.c
   -> DELETE: llvm.ssa.copy.i64 daxpy.c (10,26)
   -> DELETE: llvm.ssa.copy.i32 daxpy.c (37,31)
   -> DELETE: llvm.ssa.copy.i64 daxpy.c (61,26)
   -> llvm.memset.p0.i64 daxpy.c (56,10)

---- End Inlining Report ------
